# Generated by Django 5.0.3 on 2024-03-15 02:02

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('addressId', models.AutoField(primary_key=True, serialize=False)),
                ('line1', models.CharField(max_length=50)),
                ('aptNum', models.CharField(max_length=10, null=True)),
                ('city', models.CharField(max_length=50)),
                ('state', models.CharField(choices=[('AL', 'Alabama'), ('AK', 'Alaska'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('CA', 'California'), ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DE', 'Delaware'), ('DC', 'District of Columbia'), ('FL', 'Florida'), ('GA', 'Georgia'), ('HI', 'Hawaii'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('ME', 'Maine'), ('MD', 'Maryland'), ('MA', 'Massachusetts'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MT', 'Montana'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NY', 'New York'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OR', 'Oregon'), ('PA', 'Pennsylvania'), ('RI', 'Rhode Island'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('UT', 'Utah'), ('VT', 'Vermont'), ('VA', 'Virginia'), ('WA', 'Washington'), ('WV', 'West Virginia'), ('WI', 'Wisconsin'), ('WY', 'Wyoming'), ('AS', 'American Samoa'), ('GU', 'Guam'), ('MP', 'Northern Mariana Islands'), ('PR', 'Puerto Rico'), ('VI', 'Virgin Islands')], max_length=2)),
                ('zipCode', models.CharField(max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('invoiceId', models.AutoField(primary_key=True, serialize=False)),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=8)),
                ('discount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('tax', models.DecimalField(decimal_places=2, max_digits=8)),
                ('shipping', models.DecimalField(decimal_places=2, max_digits=8)),
                ('orderStatus', models.CharField(max_length=20)),
                ('invoiceDate', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('card_number', models.CharField(max_length=16)),
                ('expiration_date', models.CharField(max_length=4)),
                ('back_number', models.CharField(max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('productId', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=1000)),
                ('price', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('qoh', models.PositiveIntegerField(default=0, verbose_name='Quantity on Hand')),
                ('category', models.CharField(choices=[('arts_crafts', 'Arts & Crafts Supplies'), ('automotive', 'Automotive & Tools'), ('children', 'Baby & Kids'), ('beauty', 'Beauty & Personal Care'), ('books', 'Books & Stationery'), ('clothing', 'Clothing & Apparel'), ('electronics', 'Electronics'), ('fitness', 'Fitness & Exercise'), ('furniture_decor', 'Furniture & Decor'), ('outdoors', 'Gardening & Outdoor Living'), ('health_wellness', 'Health & Wellness'), ('jewelry', 'Jewelry & Accessories'), ('office', 'Office Supplies'), ('pets', 'Pet Supplies'), ('sports', 'Sports & Outdoors'), ('toys', 'Toys & Games'), ('travel', 'Travel & Luggage')], max_length=50)),
                ('weight', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)])),
                ('length', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)])),
                ('width', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)])),
                ('height', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)])),
                ('dateAdded', models.DateTimeField(auto_now_add=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='product_images/')),
            ],
        ),
        migrations.CreateModel(
            name='Storefront',
            fields=[
                ('storeId', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=500, null=True)),
                ('dateCreated', models.DateTimeField(auto_now_add=True)),
                ('bannerImage', models.ImageField(blank=True, null=True, upload_to='storefront_banners/')),
                ('logoImage', models.ImageField(blank=True, null=True, upload_to='storefront_logos/')),
            ],
        ),
        migrations.CreateModel(
            name='LineItem',
            fields=[
                ('lineItemId', models.AutoField(primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField()),
                ('linePrice', models.DecimalField(decimal_places=2, max_digits=8)),
                ('invoiceId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='BackendWork.invoice')),
                ('productId', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='BackendWork.product')),
            ],
        ),
        migrations.CreateModel(
            name='ProductImages',
            fields=[
                ('imageId', models.AutoField(primary_key=True, serialize=False)),
                ('imageURL', models.URLField(max_length=100)),
                ('imageTitle', models.CharField(max_length=30)),
                ('imageDescription', models.CharField(max_length=500, null=True)),
                ('productId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='BackendWork.product')),
            ],
        ),
        migrations.CreateModel(
            name='ProductVideos',
            fields=[
                ('videoId', models.AutoField(primary_key=True, serialize=False)),
                ('videoURL', models.URLField(max_length=100)),
                ('videoTitle', models.CharField(max_length=30)),
                ('videoDescription', models.CharField(max_length=500, null=True)),
                ('productId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='BackendWork.product')),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='soldByStoreId',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='BackendWork.storefront'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='storeId',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='BackendWork.storefront'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=10, null=True)),
                ('billing_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='userBillingAddress', to='BackendWork.address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='paymentMethod', to='BackendWork.payment')),
                ('shipping_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='userShippingAddress', to='BackendWork.address')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='StoreReviews',
            fields=[
                ('reviewId', models.AutoField(primary_key=True, serialize=False)),
                ('rating', models.PositiveIntegerField()),
                ('comment', models.CharField(max_length=500)),
                ('reviewDate', models.DateTimeField(auto_now_add=True)),
                ('storeId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='BackendWork.storefront')),
                ('reviewerId', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='storefront',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProductReviews',
            fields=[
                ('reviewId', models.AutoField(primary_key=True, serialize=False)),
                ('rating', models.PositiveIntegerField()),
                ('comment', models.CharField(max_length=500)),
                ('reviewDate', models.DateTimeField(auto_now_add=True)),
                ('productId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='BackendWork.product')),
                ('reviewerId', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProductQuestions',
            fields=[
                ('questionId', models.AutoField(primary_key=True, serialize=False)),
                ('question', models.CharField(max_length=500)),
                ('dateAsked', models.DateTimeField(auto_now_add=True)),
                ('answer', models.CharField(max_length=500)),
                ('dateAnswered', models.DateTimeField(default=None)),
                ('productId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='BackendWork.product')),
                ('askedById', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='invoice',
            name='customerId',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DisputeTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disputeDetails', models.CharField(max_length=1000)),
                ('disputeDate', models.DateTimeField(auto_now_add=True)),
                ('disputeStatus', models.CharField(max_length=20)),
                ('resolutionDetails', models.CharField(max_length=1000)),
                ('resolutionDate', models.DateTimeField()),
                ('invoiceId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='BackendWork.invoice')),
                ('initiatorId', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='initiatedTickets', to=settings.AUTH_USER_MODEL)),
                ('resolvedBy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolvedTickets', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CustomerReviews',
            fields=[
                ('reviewId', models.AutoField(primary_key=True, serialize=False)),
                ('rating', models.PositiveIntegerField()),
                ('comment', models.CharField(max_length=500)),
                ('reviewDate', models.DateTimeField(auto_now_add=True)),
                ('reviewerId', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='BackendWork.storefront')),
                ('customerId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='address',
            name='userId',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='product',
            unique_together={('name', 'soldByStoreId')},
        ),
    ]
